package arugoTest;

public class alltest {
	
		public static void main(String str[]) {
			
			int days = 30; //募集する日数。ここではテストデータとして15日。
			int StaffNum = 13; //スタッフの人数 テストデータとして13人
			int StaffStatus = 15; //スタッフの項目
			int MaxWeight = 4; //重みの最大値
			int LowestWeight = 1; //重みの最低値
			String staff[][] = new String[StaffNum][StaffStatus];//各スタッフのステータス
			int NeedShift[][] = new int[days][2];//１日の必要な人数
			String ShiftDivider[] = {"10-23","11-23","10-17","11-17","15-23","17-23","18-23","18.5-23","19-23"};//テストケース　必要シフト割り振り
			String NextDivider[][] = {{"10-23","11-23"},{"11-23","10-17","17-23"},{"10-17","11-17"},{"15-23","17-23"},{"17-23","18-23"},{"18-23","18.5-23"},{"18.5-23","19-23"}};
			int dotw[][] = {{1,0},{2,0},{3,1},{4,1},{5,1},{6,1},{7,0},{8,0},{9,0},{10,0},{11,1},{12,1} ,{13,1},{14,0},{15,0},{16,0},{17,0},{18,1},{19,1},{20,1},{21,0},{22,1},{23,1},{24,0},{25,1},{26,1},{27,1},{28,0},{29,0},{30,0}};
			int ShiftDividerCount = ShiftDivider.length;
			
			String StaffShift[][] = {//テストケース　提出シフト
					//   1       2       3       4       5       6       7       8       9       10      11      12      13      14      15
				{"0" ,"10-23","-1"   ,"-1"   ,"10-23","10-23","17-23","17-23","10-23","17-23","17-23","-1"   ,"-1"   ,"17-23","-1"   ,"-1"   ,"11-23","17-23","-1"   ,"10-23","10-23","17-23","17-23","10-23","17-23","17-23","-1"   ,"-1"   ,"17-23","-1"   ,"-1"   },//A
				{"1" ,"10-23","18-23","18-23","10-23","-1"   ,"18-23","18-23","10-23","18-23","18-23","10-23","-1"   ,"18-23","18-23","18-23","18-23","18-23","18-23","10-23","-1"   ,"18-23","18-23","10-23","18-23","18-23","10-23","-1"   ,"18-23","18-23","18-23"},//B
				{"2" ,"17-23","18-23","17-23","-1"   ,"-1"   ,"-1"   ,"17-23","17-23","18-23","17-23","17-23","17-23","-1"   ,"-1"   ,"-1"   ,"17-23","18-23","17-23","-1"   ,"-1"   ,"-1"   ,"17-23","17-23","18-23","17-23","17-23","17-23","-1"   ,"-1"   ,"-1"   },//C
				{"3" ,"17-23","17-23","-1"   ,"17-23","17-23","-1"   ,"18-23","17-23","17-23","-1"   ,"17-23","18-23","-1"   ,"18-23","-1"   ,"17-23","17-23","-1"   ,"17-23","17-23","-1"   ,"18-23","17-23","17-23","-1"   ,"17-23","18-23","-1"   ,"18-23","-1"   },//D
				{"4" ,"-1"   ,"-1"   ,"17-23","17-23","15-23","18-23","15-23","-1"   ,"-1"   ,"17-23","-1"   ,"17-23","18-23","-1"   ,"-1"   ,"-1"   ,"-1"   ,"17-23","17-23","15-23","18-23","15-23","-1"   ,"-1"   ,"17-23","-1"   ,"17-23","18-23","-1"   ,"-1"   },//E
				{"5" ,"-1"   ,"17-23","17-23","-1"   ,"-1"   ,"18-23","-1"   ,"-1"   ,"17-23","17-23","-1"   ,"-1"   ,"18-23","-1"   ,"18-23","-1"   ,"17-23","17-23","-1"   ,"-1"   ,"18-23","-1"   ,"-1"   ,"17-23","17-23","-1"   ,"-1"   ,"18-23","-1"   ,"18-23"},//F
				{"6" ,"-1"   ,"-1"   ,"-1"   ,"-1"   ,"-1"   ,"-1"   ,"-1"   ,"-1"   ,"-1"   ,"-1"   ,"-1"   ,"-1"   ,"-1"   ,"-1"   ,"-1"   ,"-1"   ,"-1"   ,"-1"   ,"-1"   ,"-1"   ,"-1"   ,"-1"   ,"-1"   ,"-1"   ,"-1"   ,"-1"   ,"-1"   ,"-1"   ,"-1"   ,"-1"   },//G
				{"7" ,"18-23","17-23","18-23","-1"   ,"-1"   ,"15-23","18-23","-1"   ,"17-23","18-23","18-23","15-23","15-23","-1"   ,"18-23","18-23","17-23","18-23","-1"   ,"-1"   ,"15-23","18-23","-1"   ,"17-23","18-23","18-23","15-23","15-23","-1"   ,"18-23"},//H
				{"8" ,"18-23","18-23","-1"   ,"18-23","18-23","18-23","-1"   ,"-1"   ,"18-23","-1"   ,"18-23","18-23","18-23","18-23","18-23","18-23","18-23","-1"   ,"18-23","18-23","18-23","-1"   ,"-1"   ,"18-23","-1"   ,"18-23","18-23","18-23","18-23","18-23"},//I
				{"9" ,"-1"   ,"18-23","-1"   ,"-1"   ,"18-23","-1"   ,"18-23","-1"   ,"18-23","-1"   ,"-1"   ,"18-23","-1"   ,"18-23","-1"   ,"-1"   ,"18-23","-1"   ,"-1"   ,"18-23","-1"   ,"18-23","-1"   ,"18-23","-1"   ,"-1"   ,"18-23","-1"   ,"18-23","-1"   },//J
				{"10","18-23","17-23","18-23","-1"   ,"-1"   ,"15-23","18-23","-1"   ,"17-23","18-23","18-23","15-23","15-23","-1"   ,"18-23","18-23","17-23","18-23","-1"   ,"-1"   ,"15-23","18-23","-1"   ,"17-23","18-23","18-23","15-23","15-23","-1"   ,"18-23"},//H
				{"11","18-23","18-23","-1"   ,"18-23","18-23","18-23","-1"   ,"-1"   ,"18-23","-1"   ,"18-23","18-23","18-23","18-23","18-23","18-23","18-23","-1"   ,"18-23","18-23","18-23","-1"   ,"-1"   ,"18-23","-1"   ,"18-23","18-23","18-23","18-23","18-23"},//I
				{"12","-1"   ,"18-23","-1"   ,"-1"   ,"18-23","-1"   ,"18-23","-1"   ,"18-23","-1"   ,"-1"   ,"18-23","-1"   ,"18-23","-1"   ,"-1"   ,"18-23","-1"   ,"-1"   ,"18-23","-1"   ,"18-23","-1"   ,"18-23","-1"   ,"-1"   ,"18-23","-1"   ,"18-23","-1"   }};
				
			String ResultShift[][] = {//テストケース　必要シフト
					{"1","10-23","17-23","17-23","18-23","18-23"},
					{"2","10-23","17-23","17-23","18-23"},
					{"3","17-23","17-23","17-23","18-23","18-23"},
					{"4","15-23","17-23","17-23","18-23"},
					{"5","15-23","17-23","18-23","18-23"},
					{"6","15-23","17-23","18-23","18-23"},
					{"7","15-23","17-23","18-23","18-23","18-23"},
					{"8","10-17","15-23","17-23","17-23","17-23"},
					{"9","17-23","17-23","17-23","18-23"},
					{"10","17-23","17-23","17-23","18-23","18-23"},
					{"11","10-23","17-23","18-23","18-23"},
					{"12","15-23","17-23","17-23","18-23","18-23"},
					{"13","15-23","18-23","18-23","18-23","18-23"},
					{"14","18-23","18-23","18-23","18-23"},
					{"15","18-23","18-23","18-23","18-23"},
					{"16","10-23","10-23","17-23","17-23","18-23","18.5-23"},
					{"17","17-23","17-23","18-23"},
					{"18","17-23","17-23","17-23","18-23","18-23"},
					{"19","15-23","17-23","17-23","18-23"},
					{"20","15-23","17-23","18-23","18-23"},
					{"21","15-23","17-23","18-23","18-23"},
					{"22","15-23","17-23","18-23","18-23","18-23"},
					{"23","10-17","15-23","17-23","17-23","17-23"},
					{"24","17-23","17-23","17-23","18-23"},
					{"25","17-23","17-23","17-23","18-23","18-23"},
					{"26","10-23","17-23","18-23","18-23"},
					{"27","15-23","17-23","17-23","18-23","18-23"},
					{"28","15-23","18-23","18-23","18-23","18-23"},
					{"29","18-23","18-23","18-23","18-23"},
					{"30","18-23","18-23","18-23","18-23"}
			};
			
			String EndShift[][] = new String[StaffNum][days + 1];//完成形のシフト
			String StaffShiftClone[][] = new String[StaffNum][days + 1];//シフト作成用シフト抽出変数
			String PerfectShift[][] = new String[StaffNum][days + 1];//最初のシフトを保持
			
			
			for(int i = 0; StaffShift.length > i; i++) {
				for(int j = 0; StaffShift[i].length > j; j++) {
					StaffShiftClone[i][j] = new String(StaffShift[i][j]);//コピー元に干渉しないように　シフト作成用シフト抽出変数
					
				}
			}
			
			for(int i = 0; StaffShift.length > i; i++) {
				for(int j = 0; StaffShift[i].length > j; j++) {
					PerfectShift[i][j] = new String(StaffShift[i][j]);//コピー元に干渉しないように　シフト作成用シフト抽出変数
					
				}
			}
			
			
			staff[0][0] = "徳澤";//名前の設定
			staff[0][1] = "4";//重みの設定
			staff[0][2] = "0";//提出率の設定
			staff[0][3] = "0";//仲良し 今回は使用しない
			staff[0][4] = "18";//年齢
			staff[0][5] = "Y";//社保の有無	Y-yes/N-no
			staff[0][6] = "N";//既婚者であるか
			staff[0][7] = "Y";//学生であるか
			staff[0][8] = "0";//キー値
			staff[0][9] = "150";//月の最低労働時間　-1は基準がないことを意味する
			staff[0][10] = "-1";//月の最高労働時間 -1は基準がないことを意味する
			staff[0][11] = "-1";//週の最低労働時間　-1は基準がないことを意味する
			staff[0][12] = "-1";//週の最高労働時間　-1は基準がないことを意味する
			staff[0][13] = "-1";//日の最低労働時間　-1は基準がないことを意味する
			staff[0][14] = "-1";//日の最高労働時間　-1は基準がないことを意味する
			
			staff[1][0] = "檜田";//名前の設定
			staff[1][1] = "3";//重みの設定
			staff[1][2] = "0";//提出率の設定
			staff[1][3] = "0";//仲良し
			staff[1][4] = "18";//年齢
			staff[1][5] = "Y";//社保の有無	Y-yes/N-no
			staff[1][6] = "N";//既婚者であるか
			staff[1][7] = "Y";//学生であるか
			staff[1][8] = "1";//キー値
			staff[1][9] = "-1";//月の最低労働時間　-1は基準がないことを意味する
			staff[1][10] = "120";//月の最高労働時間 -1は基準がないことを意味する
			staff[1][11] = "-1";//週の最低労働時間　-1は基準がないことを意味する
			staff[1][12] = "-1";//週の最高労働時間　-1は基準がないことを意味する
			staff[1][13] = "-1";//日の最低労働時間　-1は基準がないことを意味する
			staff[1][14] = "-1";//日の最高労働時間　-1は基準がないことを意味する

			staff[2][0] = "三浦";//名前の設定
			staff[2][1] = "3";//重みの設定
			staff[2][2] = "0";//提出率の設定
			staff[2][3] = "0";//仲良し
			staff[2][4] = "18";//年齢
			staff[2][5] = "Y";//社保の有無	Y-yes/N-no
			staff[2][6] = "N";//既婚者であるか
			staff[2][7] = "Y";//学生であるか
			staff[2][8] = "2";//キー値
			staff[2][9] = "-1";//月の最低労働時間　-1は基準がないことを意味する
			staff[2][10] = "120";//月の最高労働時間 -1は基準がないことを意味する
			staff[2][11] = "-1";//週の最低労働時間　-1は基準がないことを意味する
			staff[2][12] = "-1";//週の最高労働時間　-1は基準がないことを意味する
			staff[2][13] = "-1";//日の最低労働時間　-1は基準がないことを意味する
			staff[2][14] = "-1";//日の最高労働時間　-1は基準がないことを意味する
			
			staff[3][0] = "田中";//名前の設定
			staff[3][1] = "3";//重みの設定
			staff[3][2] = "0";//提出率の設定
			staff[3][3] = "0";//仲良し
			staff[3][4] = "18";//年齢
			staff[3][5] = "Y";//社保の有無	Y-yes/N-no
			staff[3][6] = "N";//既婚者であるか
			staff[3][7] = "Y";//学生であるか
			staff[3][8] = "3";//キー値
			staff[3][9] = "-1";//月の最低労働時間　-1は基準がないことを意味する
			staff[3][10] = "120";//月の最高労働時間 -1は基準がないことを意味する
			staff[3][11] = "-1";//週の最低労働時間　-1は基準がないことを意味する
			staff[3][12] = "-1";//週の最高労働時間　-1は基準がないことを意味する
			staff[3][13] = "-1";//日の最低労働時間　-1は基準がないことを意味する
			staff[3][14] = "-1";//日の最高労働時間　-1は基準がないことを意味する
			
			staff[4][0] = "江田";//名前の設定
			staff[4][1] = "3";//重みの設定
			staff[4][2] = "0";//提出率の設定
			staff[4][3] = "0";//仲良し
			staff[4][4] = "18";//年齢
			staff[4][5] = "Y";//社保の有無	Y-yes/N-no
			staff[4][6] = "N";//既婚者であるか
			staff[4][7] = "Y";//学生であるか
			staff[4][8] = "4";//キー値
			staff[4][9] = "-1";//月の最低労働時間　-1は基準がないことを意味する
			staff[4][10] = "120";//月の最高労働時間 -1は基準がないことを意味する
			staff[4][11] = "-1";//週の最低労働時間　-1は基準がないことを意味する
			staff[4][12] = "-1";//週の最高労働時間　-1は基準がないことを意味する
			staff[4][13] = "-1";//日の最低労働時間　-1は基準がないことを意味する
			staff[4][14] = "-1";//日の最高労働時間　-1は基準がないことを意味する
			
			staff[5][0] = "福田";//名前の設定
			staff[5][1] = "3";//重みの設定
			staff[5][2] = "0";//提出率の設定
			staff[5][3] = "0";//仲良し
			staff[5][4] = "18";//年齢
			staff[5][5] = "Y";//社保の有無	Y-yes/N-no
			staff[5][6] = "N";//既婚者であるか
			staff[5][7] = "Y";//学生であるか
			staff[5][8] = "5";//キー値
			staff[5][9] = "-1";//月の最低労働時間　-1は基準がないことを意味する
			staff[5][10] = "120";//月の最高労働時間 -1は基準がないことを意味する
			staff[5][11] = "-1";//週の最低労働時間　-1は基準がないことを意味する
			staff[5][12] = "-1";//週の最高労働時間　-1は基準がないことを意味する
			staff[5][13] = "-1";//日の最低労働時間　-1は基準がないことを意味する
			staff[5][14] = "-1";//日の最高労働時間　-1は基準がないことを意味する
			
			staff[6][0] = "古澤";//名前の設定
			staff[6][1] = "1";//重みの設定
			staff[6][2] = "0";//提出率の設定
			staff[6][3] = "0";//仲良し
			staff[6][4] = "18";//年齢
			staff[6][5] = "Y";//社保の有無	Y-yes/N-no
			staff[6][6] = "N";//既婚者であるか
			staff[6][7] = "Y";//学生であるか
			staff[6][8] = "6";//キー値
			staff[6][9] = "-1";//月の最低労働時間　-1は基準がないことを意味する
			staff[6][10] = "120";//月の最高労働時間 -1は基準がないことを意味する
			staff[6][11] = "-1";//週の最低労働時間　-1は基準がないことを意味する
			staff[6][12] = "-1";//週の最高労働時間　-1は基準がないことを意味する
			staff[6][13] = "-1";//日の最低労働時間　-1は基準がないことを意味する
			staff[6][14] = "-1";//日の最高労働時間　-1は基準がないことを意味する
			
			staff[7][0] = "小畑";//名前の設定
			staff[7][1] = "3";//重みの設定
			staff[7][2] = "0";//提出率の設定
			staff[7][3] = "0";//仲良し
			staff[7][4] = "18";//年齢
			staff[7][5] = "Y";//社保の有無	Y-yes/N-no
			staff[7][6] = "N";//既婚者であるか
			staff[7][7] = "Y";//学生であるか
			staff[7][8] = "7";//キー値
			staff[7][9] = "-1";//月の最低労働時間　-1は基準がないことを意味する
			staff[7][10] = "120";//月の最高労働時間 -1は基準がないことを意味する
			staff[7][11] = "-1";//週の最低労働時間　-1は基準がないことを意味する
			staff[7][12] = "-1";//週の最高労働時間　-1は基準がないことを意味する
			staff[7][13] = "-1";//日の最低労働時間　-1は基準がないことを意味する
			staff[7][14] = "-1";//日の最高労働時間　-1は基準がないことを意味する
			
			staff[8][0] = "豊福";//名前の設定
			staff[8][1] = "1";//重みの設定
			staff[8][2] = "0";//提出率の設定
			staff[8][3] = "0";//仲良し
			staff[8][4] = "18";//年齢
			staff[8][5] = "Y";//社保の有無	Y-yes/N-no
			staff[8][6] = "N";//既婚者であるか
			staff[8][7] = "Y";//学生であるか
			staff[8][8] = "8";//キー値
			staff[8][9] = "-1";//月の最低労働時間　-1は基準がないことを意味する
			staff[8][10] = "120";//月の最高労働時間 -1は基準がないことを意味する
			staff[8][11] = "-1";//週の最低労働時間　-1は基準がないことを意味する
			staff[8][12] = "-1";//週の最高労働時間　-1は基準がないことを意味する
			staff[8][13] = "-1";//日の最低労働時間　-1は基準がないことを意味する
			staff[8][14] = "-1";//日の最高労働時間　-1は基準がないことを意味する

			staff[9][0] = "中田";//名前の設定
			staff[9][1] = "3";//重みの設定
			staff[9][2] = "0";//提出率の設定
			staff[9][3] = "0";//仲良し
			staff[9][4] = "18";//年齢
			staff[9][5] = "Y";//社保の有無	Y-yes/N-no
			staff[9][6] = "N";//既婚者であるか
			staff[9][7] = "Y";//学生であるか
			staff[9][8] = "9";//キー値
			staff[9][9] = "-1";//月の最低労働時間　-1は基準がないことを意味する
			staff[9][10] = "120";//月の最高労働時間 -1は基準がないことを意味する
			staff[9][11] = "-1";//週の最低労働時間　-1は基準がないことを意味する
			staff[9][12] = "-1";//週の最高労働時間　-1は基準がないことを意味する
			staff[9][13] = "-1";//日の最低労働時間　-1は基準がないことを意味する
			staff[9][14] = "-1";//日の最高労働時間　-1は基準がないことを意味する
			
			staff[10][0] = "工藤";//名前の設定
			staff[10][1] = "1";//重みの設定
			staff[10][2] = "0";//提出率の設定
			staff[10][3] = "0";//仲良し
			staff[10][4] = "18";//年齢
			staff[10][5] = "Y";//社保の有無	Y-yes/N-no
			staff[10][6] = "N";//既婚者であるか
			staff[10][7] = "Y";//学生であるか
			staff[10][8] = "10";//キー値
			staff[10][9] = "-1";//月の最低労働時間　-1は基準がないことを意味する
			staff[10][10] = "120";//月の最高労働時間 -1は基準がないことを意味する
			staff[10][11] = "-1";//週の最低労働時間　-1は基準がないことを意味する
			staff[10][12] = "-1";//週の最高労働時間　-1は基準がないことを意味する
			staff[10][13] = "-1";//日の最低労働時間　-1は基準がないことを意味する
			staff[10][14] = "-1";//日の最高労働時間　-1は基準がないことを意味する
			
			staff[11][0] = "津曲";//名前の設定
			staff[11][1] = "2";//重みの設定
			staff[11][2] = "0";//提出率の設定
			staff[11][3] = "0";//仲良し
			staff[11][4] = "18";//年齢
			staff[11][5] = "Y";//社保の有無	Y-yes/N-no
			staff[11][6] = "N";//既婚者であるか
			staff[11][7] = "Y";//学生であるか
			staff[11][8] = "11";//キー値
			staff[11][9] = "-1";//月の最低労働時間　-1は基準がないことを意味する
			staff[11][10] = "120";//月の最高労働時間 -1は基準がないことを意味する
			staff[11][11] = "-1";//週の最低労働時間　-1は基準がないことを意味する
			staff[11][12] = "-1";//週の最高労働時間　-1は基準がないことを意味する
			staff[11][13] = "-1";//日の最低労働時間　-1は基準がないことを意味する
			staff[11][14] = "-1";//日の最高労働時間　-1は基準がないことを意味する
		
			staff[12][0] = "山村";//名前の設定
			staff[12][1] = "3";//重みの設定
			staff[12][2] = "0";//提出率の設定
			staff[12][3] = "0";//仲良し
			staff[12][4] = "18";//年齢
			staff[12][5] = "Y";//社保の有無	Y-yes/N-no
			staff[12][6] = "N";//既婚者であるか
			staff[12][7] = "Y";//学生であるか
			staff[12][8] = "12";//キー値
			staff[12][9] = "-1";//月の最低労働時間　-1は基準がないことを意味する
			staff[12][10] = "120";//月の最高労働時間 -1は基準がないことを意味する
			staff[12][11] = "-1";//週の最低労働時間　-1は基準がないことを意味する
			staff[12][12] = "-1";//週の最高労働時間　-1は基準がないことを意味する
			staff[12][13] = "-1";//日の最低労働時間　-1は基準がないことを意味する
			staff[12][14] = "-1";//日の最高労働時間　-1は基準がないことを意味する
			
			
		
			int[] Ycounter = new int[StaffNum];//従業員ごとの出勤日数
			
			otherSort os = new otherSort();
			verticalSort vs = new verticalSort();
			besideSort bs  = new besideSort(staff);
			Ycounter = os.Ycounter2(StaffShift, StaffNum);
			staff = os.SubRate(days,Ycounter,staff);
			String SortStaff[][] = new String[staff.length][9];//重み順に変換用の配列
			SortStaff = os.DesSort(staff);
			ResultShift = os.ShiftOpti(StaffShift,NextDivider, ResultShift, days);
			
			
			
			for(int h = 0; ShiftDividerCount > h; h++) {
				
				NeedShift = os.NeedShiftCounter(NeedShift, ShiftDivider, ResultShift, h);
			
				String[][] StaffShiftClone2 = os.ShiftCalc(StaffShiftClone, StaffShift, h, ShiftDivider);
			
				
				String Shift[][] = vs.verSort(SortStaff,staff, NeedShift, StaffShiftClone2,
					   days, StaffNum,MaxWeight,LowestWeight,ShiftDivider[h],dotw);//重みごとに仮としてシフトを作成するメソッド
			
				StaffShiftClone2 = os.ShiftDup(Shift, ShiftDivider, StaffShiftClone2, h);
			
				EndShift = os.End(Shift, EndShift, ShiftDivider, StaffShiftClone2, h);
			
			}
			/*for(int i = 0; vs.inCount.length > i; i++) {
					System.out.println(vs.inCount[i][1]);
			}*/
			do{
			bs.RoadTimes(EndShift);
			bs.MaxMin(bs.RoadTimes(EndShift), staff, days, 30/*テストで30*/);
			}while(bs.beSort(PerfectShift, staff, bs.RoadTimes(EndShift), EndShift));
			
			do{
				bs.RoadTimes(EndShift);
				bs.MaxMin(bs.RoadTimes(EndShift), staff, days, 30/*テストで30*/);
			}while(bs.beSort2(PerfectShift, staff, bs.RoadTimes(EndShift), EndShift));
			
			
			
			for(int i = 0; EndShift.length > i; i++) {//確認用
			for(int j = 0; EndShift[i].length > j; j++) {
				
				int num1 = EndShift[i][j].indexOf("-");//出勤、退勤抜き出しに使用
				if(j == 0) {
					System.out.print(staff[Integer.parseInt(EndShift[i][j])][0] + "　");
					continue;
				}
				int x = os.getHan1Zen2(EndShift[i][j]);
				if(x == 2) {
					EndShift[i][j] = "　　×　　";
					System.out.printf(EndShift[i][j] + "　");
					EndShift[i][j] = "×";
				}else if(x == 1) {
					EndShift[i][j] = "　　‐　　";
					System.out.printf(EndShift[i][j] + "　");
					EndShift[i][j] = "‐";
				}else if(x == 5){
					System.out.printf("　" + EndShift[i][j].substring(0,num1) + "‐" + EndShift[i][j].substring(num1+1) + "　");
				}else if(x == 7){
					
					if(num1 == 4) {
						System.out.printf(EndShift[i][j].substring(0,num1) + "‐" + EndShift[i][j].substring(num1+1) + "　");
					}else if(num1 == 2) {
						System.out.printf("　" + EndShift[i][j].substring(0,num1) + "‐" + EndShift[i][j].substring(num1+1));
					}else {
						System.out.printf(EndShift[i][j].substring(0,num1) + "‐" + EndShift[i][j].substring(num1+1));
					}
				}
			}
			System.out.println();
		}
			bs.RoadTimes(EndShift);
		}

}
